# ======================================================
# =============== CROSS-PLATFORM ZSHRC ================
# ======================================================

# Path configuration
path=(
    ~/bin
    ~/.local/bin
{{- if eq .chezmoi.os "darwin" }}
    /opt/homebrew/bin
    /opt/homebrew/sbin
    /usr/local/bin
{{- else }}
    /usr/local/bin
{{- end }}
    $path
)
# Remove duplicates from path
typeset -U path

# Zsh options
setopt AUTO_CD
setopt HIST_VERIFY
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE

# History config
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# Better basic completions
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Default editor
{{- if eq .editor "nvim" }}
export EDITOR="nvim"
{{- else }}
export EDITOR="vim"
{{- end }}

# If editor is nvim, alias vim to nvim
if [ "$EDITOR" = "nvim" ]; then
    alias vim="nvim"
fi

# Oh My Zsh configuration
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="gnzh"

# Plugins
plugins=(
    git
    docker
    docker-compose
    zsh-history-substring-search
{{- if eq .chezmoi.os "darwin" }}
    brew
    macos
{{- else }}
    ubuntu
{{- end }}
)

# Enable command auto-correction
ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="%F{blue}waiting...%f"

source $ZSH/oh-my-zsh.sh

# ======================================================
# ================== FZF INTEGRATION ==================
# ======================================================

# Enable fzf keybindings and fuzzy auto-completion
{{- if eq .chezmoi.os "darwin" }}
source {{ .fzf_path }}/key-bindings.zsh
source {{ .fzf_path }}/completion.zsh
{{- else }}
source {{ .fzf_path }}/key-bindings.zsh
source {{ .fzf_path }}/completion.zsh
{{- end }}

# Set "Github Dark" colors for fzf widgets
FZF_DEFAULT_OPTS=""
FZF_DEFAULT_OPTS+="--height 40% "
FZF_DEFAULT_OPTS+="--layout=reverse "
FZF_DEFAULT_OPTS+="--border "
FZF_DEFAULT_OPTS+="--color="
FZF_DEFAULT_OPTS+="fg:#c9d1d9,bg:#1c2128,hl:#58a6ff,"
FZF_DEFAULT_OPTS+="fg+:#d0d7de,bg+:#22272e,hl+:#79c0ff,"
FZF_DEFAULT_OPTS+="info:#8b949e,prompt:#58a6ff,pointer:#79c0ff,"
FZF_DEFAULT_OPTS+="marker:#f85149,spinner:#58a6ff,header:#58a6ff"
FZF_DEFAULT_OPTS+=" "
export FZF_DEFAULT_OPTS

# ======================================================
# ===================== ALIASES ========================
# ======================================================

# Navigation
alias ll='ls -alh'
alias la='ls -A' 
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias cdh='cd ~'

# Modern CLI tools
alias ls='eza --icons'
alias ll='eza -la --icons --git'
alias tree='eza --tree --icons'
alias cat='bat'
alias find='fd'
alias grep='rg'
alias cd='z'  # zoxide smart cd

# Explicit tmux conf path
alias tmux='tmux -f ~/.tmux.conf'

# File management
alias files='yazi'
alias fm='yazi'

# Git shortcuts
alias gs='git status'
alias gp='git pull'
alias gl='git log --oneline -10'
alias gb='git branch'
alias gco='git checkout'
alias gd='git diff'
alias ga='git add'
alias gc='git commit'

# Docker shortcuts
alias dps='docker ps'
alias dc='docker compose'
alias dcup='docker compose up -d'
alias dcdown='docker compose down'
alias dclogs='docker compose logs -f'
alias dexec='docker exec -it'

# System monitoring
alias ports='netstat -tulpn'
alias disk='df -h'
alias mem='free -h'
alias reload='source ~/.zshrc'

# Quick chezmoi helpers
alias cm='chezmoi'
alias cma='chezmoi apply'
alias cme='chezmoi edit'
alias cms='chezmoi status'
alias cmd='chezmoi diff'

# uv Python management helpers
alias uvpy='uv python'
alias uvvenv='uv venv'
alias uvsync='uv sync'
alias uvrun='uv run'
alias uvadd='uv add'
alias uvremove='uv remove'

{{- if eq .chezmoi.os "darwin" }}
# macOS specific aliases
alias flushdns='sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder'
alias showfiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
alias hidefiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'
{{- else }}
# Linux specific aliases
alias open='xdg-open'
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
{{- end }}

# ======================================================
# ==================== FUNCTIONS ======================
# ======================================================

# Quick environment info function
env-info() {
    echo "üîß Current Environment Information"
    echo "================================="
    echo "Hostname: {{ .hostname }}"
    echo "OS: {{ .chezmoi.os }}"
    echo "Working Directory: $(pwd)"
    echo "Shell: $SHELL"
    echo "Editor: $EDITOR"
    echo "Git User: $(git config user.name 2>/dev/null || echo 'Not configured')"
}

# Initialize zoxide (smart cd)
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
fi

# Docker log viewer with container selection
docker-logs() {
    if [[ $# -eq 0 ]]; then
        local container=$(docker ps --format "table {{`{{.Names}}`}}\t{{`{{.Status}}`}}" | fzf --header-lines=1 | awk '{print $1}')
        if [[ -n "$container" ]]; then
            docker logs -f "$container"
        fi
    else
        docker logs -f "$1"
    fi
}

# Git status for multiple repositories
git-status-all() {
    local base_dir="${1:-.}"
    echo "üîç Checking git status in all subdirectories of $base_dir"
    for dir in "$base_dir"/*; do
        if [[ -d "$dir/.git" ]]; then
            echo ""
            echo "üìÅ $(basename "$dir"):"
            (cd "$dir" && git status --porcelain | head -10)
        fi
    done
}

# Quick backup function for dotfiles
backup-dotfiles() {
    local backup_dir="$HOME/dotfiles-backup-$(date +%Y%m%d-%H%M%S)"
    echo "üì¶ Creating dotfiles backup in $backup_dir"
    mkdir -p "$backup_dir"
    
    local files=(".zshrc" ".vimrc" ".gitconfig")
    for file in "${files[@]}"; do
        if [[ -f "$HOME/$file" ]]; then
            cp "$HOME/$file" "$backup_dir/"
            echo "‚úÖ Backed up $file"
        fi
    done
    
    if [[ -d "$HOME/.config/nvim" ]]; then
        cp -r "$HOME/.config/nvim" "$backup_dir/"
        echo "‚úÖ Backed up nvim config"
    fi
    
    echo "üéâ Backup complete: $backup_dir"
}

# uv project management helper
uv-project() {
    local project_name="${1:-$(basename $(pwd))}"
    local python_version="${2:-3.12}"
    
    if [[ -z "$1" ]]; then
        echo "üîß Setting up uv project: $project_name (Python $python_version)"
    else
        echo "üîß Setting up uv project: $project_name (Python $python_version)"
    fi
    
    # Create new project directory if it doesn't exist
    if [[ ! -d "$project_name" ]]; then
        mkdir -p "$project_name"
        cd "$project_name"
    fi
    
    # Initialize uv project
    if [[ ! -f "pyproject.toml" ]]; then
        uv init --python "$python_version" "$project_name"
        echo "‚úÖ Created new uv project: $project_name"
    else
        echo "‚úÖ Project already initialized"
    fi
    
    # Create virtual environment
    uv venv
    echo "‚úÖ Virtual environment created"
    
    # Activate virtual environment
    source .venv/bin/activate
    echo "‚úÖ Virtual environment activated"
    
    echo "üöÄ Ready to develop! Use 'uv add <package>' to add dependencies"
}

# =============================================================================
# USER CUSTOMIZATIONS - Add your personal settings below this line
# =============================================================================
# Personal aliases, functions, and environment variables go here
# This section will not be overwritten by chezmoi updates
