#!/bin/bash
set -e

echo "üì¶ Installing essential packages for {{ .chezmoi.os }}..."

{{- if eq .chezmoi.os "darwin" }}
# macOS package installation with Homebrew
if ! command -v brew &> /dev/null; then
    echo "üç∫ Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to PATH based on architecture
    if [[ $(uname -m) == "arm64" ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    else
        echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/usr/local/bin/brew shellenv)"
    fi
fi

# Update Homebrew
brew update

# Install Rust and Cargo first (required for many tools)
if ! command -v cargo &> /dev/null; then
    echo "ü¶Ä Installing Rust and Cargo..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    
    # Source the cargo environment (this sets up PATH and other env vars)
    if [[ -f "$HOME/.cargo/env" ]]; then
        source "$HOME/.cargo/env"
        echo "‚úÖ Rust and Cargo environment sourced"
    else
        echo "‚ö†Ô∏è  .cargo/env not found, manually adding to PATH"
        export PATH="$HOME/.cargo/bin:$PATH"
    fi
    
    # Add cargo to PATH for current session and future sessions
    if ! grep -q "source.*cargo/env" ~/.zprofile; then
        echo 'source "$HOME/.cargo/env"' >> ~/.zprofile
    fi
    if ! grep -q "source.*cargo/env" ~/.bash_profile; then
        echo 'source "$HOME/.cargo/env"' >> ~/.bash_profile
    fi
    
    # Verify installation
    if command -v cargo &> /dev/null; then
        echo "‚úÖ Rust and Cargo installed successfully: $(cargo --version)"
    else
        echo "‚ùå Cargo not found in PATH after installation"
        exit 1
    fi
else
    echo "‚úÖ Rust and Cargo already installed: $(cargo --version)"
    # Ensure cargo is in PATH for current session
    if [[ -f "$HOME/.cargo/env" ]]; then
        source "$HOME/.cargo/env"
    else
        export PATH="$HOME/.cargo/bin:$PATH"
    fi
fi

# Install uv first (Python package manager) - use official installer
if ! command -v uv &> /dev/null; then
    echo "üêç Installing uv (Python package manager)..."
    # Use the official uv installer (not available on crates.io yet)
    curl -LsSf https://astral.sh/uv/install.sh | sh
    
    # Add uv to PATH for current session and future sessions
    export PATH="$HOME/.local/bin:$PATH"
    if ! grep -q "export PATH.*local/bin" ~/.zprofile; then
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zprofile
    fi
    
    # Verify installation
    if command -v uv &> /dev/null; then
        echo "‚úÖ uv installed successfully: $(uv --version)"
    else
        echo "‚ùå uv installation failed"
        exit 1
    fi
else
    echo "‚úÖ uv already installed: $(uv --version)"
fi

# Install Python via uv if not available
if ! command -v python3 &> /dev/null; then
    echo "üêç Installing Python via uv..."
    if command -v uv &> /dev/null; then
        uv python install 3.12
        # Add uv-managed Python to PATH
        export PATH="$HOME/.local/bin:$PATH"
        if ! grep -q "export PATH.*local/bin" ~/.zprofile; then
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zprofile
        fi
    else
        echo "‚ö†Ô∏è  uv not available, falling back to Homebrew Python..."
        brew install python@3.12
    fi
else
    echo "‚úÖ Python already available"
fi

# Install essential packages (excluding Python since we handle it above)
packages=(
    "git"
    "curl"
    "wget"
    "zsh"
    "fzf" 
    "vim"
    "neovim"
    "tree"
    "htop"
    "jq"
    "ripgrep"
    "fd"
    "bat"
    "eza"  # modern ls replacement
    "zoxide"
    "yazi"
    "tmux"
    "node"  # for npm packages
)

for package in "${packages[@]}"; do
    if ! brew list "$package" &> /dev/null; then
        echo "Installing $package..."
        brew install "$package"
    else
        echo "‚úÖ $package already installed"
    fi
done

# Install fzf key bindings and fuzzy completion
if [[ $(uname -m) == "arm64" ]]; then
    # Apple Silicon Mac
    if [[ -f "/opt/homebrew/opt/fzf/install" ]]; then
        /opt/homebrew/opt/fzf/install --key-bindings --completion --no-update-rc
    fi
else
    # Intel Mac
    if [[ -f "/usr/local/opt/fzf/install" ]]; then
        /usr/local/opt/fzf/install --key-bindings --completion --no-update-rc
    fi
fi

# Install global npm packages
if command -v npm &> /dev/null; then
    echo "üì¶ Installing global npm packages..."
    npm install -g @google/gemini-cli
fi

# Install cargo-based tools if cargo is available
if command -v cargo &> /dev/null; then
    echo "ü¶Ä Installing cargo-based tools..."
    
    # Install eza (modern ls replacement)
    if ! command -v eza &> /dev/null; then
        echo "üì¶ Installing eza via cargo..."
        cargo install eza
    else
        echo "‚úÖ eza already installed"
    fi
    
    # Install zoxide (smart cd)
    if ! command -v zoxide &> /dev/null; then
        echo "üì¶ Installing zoxide via cargo..."
        cargo install zoxide
    else
        echo "‚úÖ zoxide already installed"
    fi
    
    # Install yazi (modern file manager)
    if ! command -v yazi &> /dev/null; then
        echo "üì¶ Installing yazi via cargo..."
        cargo install --locked yazi-fm yazi-cli
    else
        echo "‚úÖ yazi already installed"
    fi
    
    # Install ripgrep (if not already installed via Homebrew)
    if ! command -v rg &> /dev/null; then
        echo "üì¶ Installing ripgrep via cargo..."
        cargo install ripgrep
    else
        echo "‚úÖ ripgrep already installed"
    fi
    
    # Install fd (if not already installed via Homebrew)
    if ! command -v fd &> /dev/null; then
        echo "üì¶ Installing fd via cargo..."
        cargo install fd-find
    else
        echo "‚úÖ fd already installed"
    fi
    
    # Install bat (if not already installed via Homebrew)
    if ! command -v bat &> /dev/null; then
        echo "üì¶ Installing bat via cargo..."
        cargo install bat
    else
        echo "‚úÖ bat already installed"
    fi
else
    echo "‚ö†Ô∏è  Cargo not available, skipping cargo-based tool installations"
fi

{{- else if (or (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.id "ubuntu") (eq .chezmoi.osRelease.id "debian")) }}
# Debian/Ubuntu package installation
echo "üêß Installing packages for Debian/Ubuntu..."

# Check if we're running in WSL
if [[ -n "$WSL_DISTRO_NAME" ]]; then
    echo "üöÄ Detected WSL environment: $WSL_DISTRO_NAME"
fi

# Update package list
sudo apt update

# Install Rust and Cargo first (required for many tools)
if ! command -v cargo &> /dev/null; then
    echo "ü¶Ä Installing Rust and Cargo..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    
    # Source the cargo environment (this sets up PATH and other env vars)
    if [[ -f "$HOME/.cargo/env" ]]; then
        source "$HOME/.cargo/env"
        echo "‚úÖ Rust and Cargo environment sourced"
    else
        echo "‚ö†Ô∏è  .cargo/env not found, manually adding to PATH"
        export PATH="$HOME/.cargo/bin:$PATH"
    fi
    
    # Add cargo to PATH for current session and future sessions
    if ! grep -q "source.*cargo/env" ~/.zprofile; then
        echo 'source "$HOME/.cargo/env"' >> ~/.zprofile
    fi
    if ! grep -q "source.*cargo/env" ~/.bashrc; then
        echo 'source "$HOME/.cargo/env"' >> ~/.bashrc
    fi
    
    # Verify installation
    if command -v cargo &> /dev/null; then
        echo "‚úÖ Rust and Cargo installed successfully: $(cargo --version)"
    else
        echo "‚ùå Cargo not found in PATH after installation"
        exit 1
    fi
else
    echo "‚úÖ Rust and Cargo already installed: $(cargo --version)"
    # Ensure cargo is in PATH for current session
    if [[ -f "$HOME/.cargo/env" ]]; then
        source "$HOME/.cargo/env"
    else
        export PATH="$HOME/.cargo/bin:$PATH"
    fi
fi

# Install uv (Python package manager) - use official installer
if ! command -v uv &> /dev/null; then
    echo "üêç Installing uv (Python package manager)..."
    # Use the official uv installer (not available on crates.io yet)
    curl -LsSf https://astral.sh/uv/install.sh | sh
    
    # Add uv to PATH for current session and future sessions
    export PATH="$HOME/.local/bin:$PATH"
    if ! grep -q "export PATH.*local/bin" ~/.zprofile; then
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zprofile
    fi
    if ! grep -q "export PATH.*local/bin" ~/.bashrc; then
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
    fi
    
    # Verify installation
    if command -v uv &> /dev/null; then
        echo "‚úÖ uv installed successfully: $(uv --version)"
    else
        echo "‚ùå uv installation failed"
        exit 1
    fi
else
    echo "‚úÖ uv already installed: $(uv --version)"
fi

# Install Python via uv if not available
if ! command -v python3 &> /dev/null; then
    echo "üêç Installing Python via uv..."
    if command -v uv &> /dev/null; then
        uv python install 3.12
        # Add uv-managed Python to PATH
        export PATH="$HOME/.local/bin:$PATH"
        if ! grep -q "export PATH.*local/bin" ~/.zprofile; then
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zprofile
        fi
    else
        echo "‚ö†Ô∏è  uv not available, falling back to system Python..."
        sudo apt install -y python3 python3-pip
    fi
else
    echo "‚úÖ Python already available"
fi

# Check Neovim installation and version
if command -v nvim &> /dev/null; then
    nvim_version=$(nvim --version | head -n1 | grep -o 'v[0-9]\+\.[0-9]\+')
    nvim_major=$(echo "$nvim_version" | cut -d'v' -f2 | cut -d'.' -f1)
    nvim_minor=$(echo "$nvim_version" | cut -d'.' -f2)
    
    echo "üìù Found Neovim $nvim_version"
    
    # Check if version is adequate (0.8+)
    if [[ "$nvim_major" -gt 0 ]] || [[ "$nvim_major" -eq 0 && "$nvim_minor" -ge 8 ]]; then
        echo "‚úÖ Neovim $nvim_version is sufficient (0.8+ required)"
    else
        echo "‚ö†Ô∏è  Neovim $nvim_version is too old (0.8+ required)"
        echo "üí° Consider manually installing a newer version from:"
        echo "   - https://github.com/neovim/neovim/releases"
        echo "   - AppImage, snap, or build from source"
        echo "   - Skipping automatic installation to preserve your setup"
    fi
else
    echo "üìù Installing Neovim (0.8+) for lazy.nvim compatibility..."
    
    # Try multiple installation methods
    nvim_installed=false
    
    # Method 1: Try Neovim PPA (may not work on newer Ubuntu versions)
    if ! grep -q "neovim-ppa" /etc/apt/sources.list.d/* 2>/dev/null; then
        echo "üîÑ Trying Neovim PPA..."
        if sudo add-apt-repository ppa:neovim-ppa/stable -y 2>/dev/null; then
            sudo apt update
            if sudo apt install -y neovim 2>/dev/null; then
                nvim_installed=true
                echo "‚úÖ Neovim installed via PPA"
            fi
        else
            echo "‚ö†Ô∏è  Neovim PPA not available for this Ubuntu version"
        fi
    fi
    
    # Method 2: Try system package (may be older version)
    if [[ "$nvim_installed" == false ]]; then
        echo "üîÑ Trying system package..."
        if sudo apt install -y neovim 2>/dev/null; then
            nvim_installed=true
            echo "‚úÖ Neovim installed via system package"
        fi
    fi
    
    # Method 3: Try snap (usually has latest version)
    if [[ "$nvim_installed" == false ]]; then
        echo "üîÑ Trying snap installation..."
        if command -v snap &> /dev/null; then
            if sudo snap install nvim --classic 2>/dev/null; then
                nvim_installed=true
                echo "‚úÖ Neovim installed via snap"
            fi
        else
            echo "‚ö†Ô∏è  Snap not available"
        fi
    fi
    
    # Method 4: Manual download and installation
    if [[ "$nvim_installed" == false ]]; then
        echo "üîÑ Trying manual download..."
        echo "üí° Downloading Neovim AppImage from GitHub releases..."
        
        # Create temporary directory
        temp_dir=$(mktemp -d)
        cd "$temp_dir"
        
        # Try to download latest stable release
        if curl -s -L -o nvim.tar.gz "https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz" 2>/dev/null; then
            tar -xzf nvim.tar.gz
            sudo mv nvim-linux64/bin/nvim /usr/local/bin/
            sudo mv nvim-linux64/lib/nvim /usr/local/lib/
            sudo mv nvim-linux64/share/nvim /usr/local/share/
            nvim_installed=true
            echo "‚úÖ Neovim installed manually from GitHub releases"
        else
            echo "‚ùå Manual download failed"
        fi
        
        # Clean up
        cd - > /dev/null
        rm -rf "$temp_dir"
    fi
    
    # Final verification
    if [[ "$nvim_installed" == true ]] && command -v nvim &> /dev/null; then
        nvim_version=$(nvim --version | head -n1)
        echo "‚úÖ Neovim installation successful: $nvim_version"
        
        # Check if version is adequate (0.8+)
        nvim_major=$(echo "$nvim_version" | grep -o 'v[0-9]\+' | cut -d'v' -f2)
        nvim_minor=$(echo "$nvim_version" | grep -o '\.[0-9]\+' | head -1 | cut -d'.' -f2)
        
        if [[ "$nvim_major" -gt 0 ]] || [[ "$nvim_major" -eq 0 && "$nvim_minor" -ge 8 ]]; then
            echo "‚úÖ Neovim version is sufficient (0.8+ required)"
        else
            echo "‚ö†Ô∏è  Neovim version may be too old for lazy.nvim"
            echo "üí° Consider manually installing a newer version"
        fi
    else
        echo "‚ùå All Neovim installation methods failed"
        echo "üí° You can manually install Neovim from:"
        echo "   - https://github.com/neovim/neovim/releases"
        echo "   - Or continue without Neovim (some features may not work)"
        echo "üí° Continuing installation..."
    fi
fi

# Install essential packages (excluding Python and Neovim since we handle them above)
packages=(
    "git" 
    "curl"
    "wget"
    "zsh"
    "fzf"
    "vim"
    "tree"
    "htop"
    "jq"
    "ripgrep"
    "fd-find"
    "bat"
    "tmux"
    "build-essential"
    "ca-certificates"  # Important for WSL
    "gnupg"            # For adding PPAs
    "software-properties-common"  # For add-apt-repository
)

# Install Node.js and npm intelligently
if ! command -v node &> /dev/null; then
    echo "üü¢ Installing Node.js..."
    # Add NodeSource repository
    curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
    sudo apt install -y nodejs
else
    echo "‚úÖ Node.js already installed: $(node --version)"
fi

if ! command -v npm &> /dev/null; then
    echo "üì¶ Installing npm..."
    # If Node.js is from NodeSource, npm should be included
    if node --version | grep -q "v[0-9]"; then
        echo "‚úÖ npm should be included with Node.js"
        # If still missing, try installing via NodeSource
        if ! command -v npm &> /dev/null; then
            sudo apt install -y npm
        fi
    fi
else
    echo "‚úÖ npm already installed: $(npm --version)"
fi

for package in "${packages[@]}"; do
    if ! dpkg -l | grep -q "^ii  $package "; then
        echo "Installing $package..."
        sudo apt install -y "$package"
    else
        echo "‚úÖ $package already installed"
    fi
done

# Install eza (not in standard repos)
if ! command -v eza &> /dev/null; then
    echo "üì¶ Installing eza..."
    if command -v cargo &> /dev/null; then
        cargo install eza
    else
        # Fallback to binary download
        wget -c https://github.com/eza-community/eza/releases/latest/download/eza_x86_64-unknown-linux-gnu.tar.gz -O - | tar xz
        sudo mv eza /usr/local/bin/
    fi
fi

# Install zoxide
if ! command -v zoxide &> /dev/null; then
    echo "üì¶ Installing zoxide..."
    if command -v cargo &> /dev/null; then
        cargo install zoxide
    else
        # Fallback to curl installation
        curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
    fi
fi

# Install yazi  
if ! command -v yazi &> /dev/null; then
    echo "üì¶ Installing yazi..."
    if command -v cargo &> /dev/null; then
        cargo install --locked yazi-fm yazi-cli
    else
        echo "‚ö†Ô∏è  Cargo not available, skipping yazi installation"
    fi
fi

# Create symlinks for fd and bat (they have different names on Ubuntu)
if command -v fdfind &> /dev/null && ! command -v fd &> /dev/null; then
    sudo ln -sf $(which fdfind) /usr/local/bin/fd
fi

if command -v batcat &> /dev/null && ! command -v bat &> /dev/null; then
    sudo ln -sf $(which batcat) /usr/local/bin/bat
fi

# Install global npm packages
if command -v npm &> /dev/null; then
    echo "üì¶ Installing global npm packages..."
    npm install -g @google/gemini-cli
fi

# WSL-specific fixes
if [[ -n "$WSL_DISTRO_NAME" ]]; then
    echo "üîß Applying WSL-specific fixes..."
    
    # Create zsh completions directory and set permissions
    sudo mkdir -p /usr/share/zsh/vendor-completions
    sudo chmod 755 /usr/share/zsh/vendor-completions
    
    # Note: Docker completions will be handled by setup-shell.sh script
    if command -v docker &> /dev/null; then
        echo "üê≥ Docker found - completions will be set up by setup-shell script"
    else
        echo "üê≥ Docker not found - install with: sudo apt install docker.io"
    fi
    
    # Ensure proper permissions for zsh completions
    sudo chmod 644 /usr/share/zsh/vendor-completions/* 2>/dev/null || true

fi

{{- end }}

echo "‚úÖ Package installation complete!"

# Final verification
echo "üîç Verifying key installations..."
if command -v cargo &> /dev/null; then
    echo "‚úÖ Cargo: $(cargo --version)"
else
    echo "‚ùå Cargo not found"
fi

if command -v nvim &> /dev/null; then
    echo "‚úÖ Neovim: $(nvim --version | head -n1)"
else
    echo "‚ùå Neovim not found"
fi

if command -v zsh &> /dev/null; then
    echo "‚úÖ Zsh: $(zsh --version)"
else
    echo "‚ùå Zsh not found"
fi

echo "üí° If you encounter any issues, try: source ~/.zprofile"
echo "üí° For Rust/Cargo: If tools aren't found, run: source ~/.cargo/env"
echo "üí° For WSL: You may need to restart your terminal or run 'exec zsh'"
